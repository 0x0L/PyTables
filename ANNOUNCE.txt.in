===========================
 Announcing PyTables @VERSION@
===========================

PyTables Pro is a library for managing hierarchical datasets and
designed to efficiently cope with extremely large amounts of data with
support for full 64-bit file addressing.  PyTables Pro runs on top of
the HDF5 library and NumPy package for achieving maximum throughput and
convenient use.  The main difference between PyTables Pro and regular
PyTables is that the Pro version includes OPSI, a new indexing
technology, allowing to perform data lookups in tables exceeding 10
gigarows (10**10 rows) in less than 1 tenth of a second.

This is a maintenance release that mainly fixes (quite a few of) bugs,
as well as some small enhancements.  Also, binaries have been compiled
against the latest stable version of HDF5, 1.6.6, released during the
past August.

As already said, PyTables Pro includes, as its most distinguishing
feature, the powerful OPSI technology that allows to index very large
amounts of data very rapidly while allowing first-class query response
times.  Its operational details as well as exhaustive benchmarks are
explained with full detail in the OPSI white paper:
http://www.carabos.com/docs/OPSI-indexes.pdf

You can buy PyTables Pro at the Carabos shop:
http://www.carabos.com/buy

Coinciding with the publication of PyTables Pro we are introducing an
innovative liberation process that will allow to ultimate release the
PyTables Pro 2.x series as open source.  You may want to know that, by
buying a PyTables Pro license, you are contributing to this process. For
details, see: http://www.carabos.com/liberation


Migration Notes
===============

If you are a user of PyTables 1.x, probably it is worth for you to look
at ``MIGRATING_TO_2.x.txt`` file where you will find directions on how
to migrate your existing PyTables 1.x apps to the 2.x versions.  You can
find an HTML version of this document at
http://www.pytables.org/moin/ReleaseNotes/Migrating_To_2.x


Bugfixes
========

- The ``coords`` argument of ``Table.readCoords()`` was not checked
  for contiguousness, raising fatal errors when it was discontiguous.
  This has been fixed.

- There is an inconsistency in the way used to specify the atom shape
  in ``Atom`` constructors.  When the shape is specified as
  ``shape=()`` it means a scalar atom and when it is specified as
  ``shape=N`` it means an atom with ``shape=(N,)``.  But when the
  shape is specified as ``shape=1`` (i.e. in the default case) then a
  scalar atom is obtained instead of an atom with ``shape=(1,)``.
  This is inconsistent and not the behavior that NumPy exhibits.

  Changing this will require a migration path which includes
  deprecating the old behaviour if we want to make the change happen
  before a new major version.  The proposed path is:

   1. In PyTables 2.0.1, we are changing the default value of the
      ``shape`` argument to ``()``, and issue a ``DeprecationWarning``
      when someone uses ``shape=1`` stating that, for the time being,
      it is equivalent to ``()``, but in near future versions it will
      become equivalent to ``(1,)``, and recommending the user to pass
      ``shape=()`` if a scalar is desired.

   2. In PyTables 2.1, we will remove the previous warning and take
      ``shape=N`` to mean ``shape=(N,)`` for any value of N.

  See ticket #96 for more info.

- In the ``ptrepack`` utility, when ``--complevel`` and ``--shuffle``
  were specified at the same time, the 'shuffle' filter was always set
  to 'off'.  This has been fixed (#104).

- An ugly bug related with the integrated Numexpr not being aware of
  all the variations of data arrangements in recarray objects has been
  fixed (#103).  We should stress that the bug only affected the
  Numexpr version integrated in PyTables, and *not* the original one.

- Added some workarounds so that NumPy scalars can be successfully
  converted to numarray objects.  Fixes #98.

- PyTables is now able to access table rows beyond 2**31 in 32-bit
  Python.  The problem was a limitation of ``xrange`` and we have
  replaced it by a new ``lrange`` class written in Pyrex.  Moreover,
  ``lrange`` has been made publicly accessible as a safe 64-bit
  replacement for ``xrange`` for 32-bit platforms users.  Fixes #99.

- If a group and a table are created in a function, and the table is
  accessed through the group, the table can be flushed now.  Fixes
  #94.


Improvements
============

- The info about the ``chunkshape`` attribute of a leaf is now printed
  in the ``__repr__`` of chunked leaves (all except ``Array``).

- After some scrupulous benchmarking job, the size of the I/O buffer
  for ``Table`` objects has been reduced to the minimum that allows
  maximum performance.  This represents more than 10x of reduction in
  size for that buffer, which will benefit those programs dealing with
  many tables simultaneously (#109).

- When passing a record array to a table at creation time, its real
  length is now used instead of the default value for
  ``expectedrows``.  This allows for better performance (#97).

- It is now possible to directly assign a field in a nested record of
  a table using the natural naming notation (#93).


Resources
=========

Go to the PyTables Pro web page for more details:

http://www.carabos.com/products/pytables-pro

To know more about the company behind the development of PyTables Pro, see:

http://www.carabos.com/

Go to the PyTables web site, its free counterpart:

http://www.pytables.org

About the HDF5 library:

http://hdfgroup.org/HDF5/

About NumPy:

http://numpy.scipy.org/


----

  **Enjoy data!**

  -- The PyTables Team

.. Local Variables:
.. mode: rst
.. coding: utf-8
.. fill-column: 72
.. End:
