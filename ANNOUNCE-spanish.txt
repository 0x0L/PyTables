PyTables 0.5.1
--------------

Esta es una versión de mantenimiento de PyTables. Debido a problemas
con una optimización de código en PyTables 0.5, ésta dejó de funcionar
si se usa numarray 0.4 (aunque funciona bien con numarray
0.5). Además, como Todd Miller ya me avisó de que la optimización no
era segura, la he *deshabilitado* en esta versión. Esto implica que el
20% de mejora en velocidad al leer tables casi ha desaparecido y se ha
quedado en un casi inapreciable 4%. Qué le vamos ha hacer!.

Si ya has instalado PyTables 0.5, te recomiendo calurosamente a que
pases a la 0.5.1, aunque estes usando numarray 0.5. Intentaré
onvestigar más a fondo el problema, y, si encuentro una solución, ya
reactivaré la optimización en un futuro.

Otra novedad que encontrarás en 0.5.1 es que he eliminado el uso del
tipo de dato "UInt64" (lo he reemplazado por el tipo "Int64") en los
tutoriales del manual de usuario ya que la versión Windows no soporta
este tipo (debido a limitaciones del compilador MSVC). Ahora, los
tutoriales deberian funcionar bien en todas las plataformas
soportadas (incluso en Windows).

Siento haber pecado y haber intentado optimizar las cosas demasiado
pronto ;-).

A continuación os adjunto el anuncio original de la versión 0.5.


PyTables 0.5 ya está disponible
-------------------------------

Esta es la segunda beta versión beta. En esta versión se ha mejorado
la velocidad de entrada/salida en un 20% en conjunto sobre la anterior
(0.4), se han solucionado algunos bugs, se le ha dotado de soporte
para un nuevo par de librerias de compresión (LZO y UCL) y ... por fin
se encuentra disponible la versión Windows.

Más en detalle:

¿Qué hay de nuevo?
------------------

- Como consecuencia de algunos ajustes en el código, la velocidad de
  entrada/salida se ha mejorado en un 20% de media. Un caso particular
  donde la velocidad ha mejorado de manera espectacular (hasta un
  factor 6), es cuando los elementos de las columnas en tablas son
  arrays unidimensionales. Esta impresionante mejora es debida
  sobretodo a las recientes mejoras en las prestaciones de la última
  versión de numarray (la 0.5). Con esto, la velocidad de lectura de
  datos se está aproximando a su máximo teórico (al menos usando el
  procedimiento actuall para acceder a los datos).

- Cuando se lee un objecto Table, y el usuario quiere acceder a
  elementos de una columna que son arrays, a éste se le entrega una
  copia para su propio uso . Por tanto, ya no hace falta hacer una
  invocación al método .copy() de nummarray para hacer esto.

- En la versión 0.4, la compresión estaba activada por defecto, al
  contrario de lo que se decía en la documentación. Ahora esto se ha
  corregido y la compresión está *desactivada* por defecto.

- Existe soporte para dos nuevas librerias de compresión: LZO y UCL
  (http://www.oberhumer.com/opensource/). Estas librerias consiguen
  velocidades de descompresión *muy* altas. Con esto, si tus datos son
  comprimibles, ahora puedes obtener mejores velocidades de lectura
  activando estas librerias, que si no se usa compresión en
  absoluto. La mejora es incluso mucho más patente si trabajas con
  cantidades de datos muy grandes (típicamente mayores que la memoria
  disponible en el sistema). Lee la documentación online para más
  información:
http://pytables.sourceforge.net/html-doc/usersguide-html3.html#subsection3.4.1

- Se han localizado y arreglado un par de "leaks" (fugas) de memoria
  (al no disponer de herramientas especializadas la cosa no fue fácil
  pero al final lo conseguí!).

- Se ha solucionado un problema en la ordenación de colmnas que
  sucedia en circunstancias muy especiales (y que hasta ahora he sido
  incapaz de reproducir de manera consistente y repetida). Gracias a
  Stan Heckman por haberlo reportado y haber sugerido la solución.

- La clase File dispone ahora de un atributo "isopen" para facilitar
  la comprobación de si un fichero está abirto o no.

- Se ha actualizado la documentación, especialmente el procedimiento
  de instalación (para incluir las instrucciones para Windows) y la
  parte de compresión, donde se dan consejos sobre el uso del nuevo
  soporte para librerias LZO y UCL.

- Se han añadido más tests (ahora hay 218!).

- PyTables se ha testeado contra el nuevo numarray 0.5 y funciona
  perfectamente. También funciona bien con Python 2.3b1.

- Y finalmente, ya existe la versión para Windows. Gracias a Alan
  McIntyre por su adaptación!. Existe incluso una versión binaria
  preparada para ser instalada con un par de clicks de ratón.


¿Qué es?
--------

En pocas palabras, PyTables ofrece una interfaz potente a la vez que
pitónica para procesar y organizar tus datos en tablas y matrices de
forma permanente en disco.

Su objectivo es posibilitar al usuario final la fácil manipulación de
datos tabulares (principalmente de carácter científico) así como
objectos Numerical Python y numarray en una estructura jerárquica y
persistente. Los fundamentos de la estructura jerárquica que subyace
en la base es la excelente libreria C llamada HDF5
(http://hdf.ncsa.uiuc.edu/HDF5).

Una tabla se define como una coleción de filas cuyos valores se
guardan en campos de longitud fija. Todas las filas tienen la misma
estructura y todos los valores en cada campo (también llamado columna)
tienen el mismo tipo de dato. Los términos "longitud fija" y "tipos de
datos estrictos" pueden parecer extraños en un lenguaje que soporta
tipos dinámicos de alto nivel, pero sin enbargo, cumplen una función
muy útil cuando el objectivo es guardar cantidades de datos muy
grandes (como las generadas en muchas aplicaciones científicas, por
ejemplo) de una manera eficiente que reduce la demanda de de tiempo de
CPU y recursos de I/O.

Asímismo, se ha invertido un esfuerzo considerable para hacer de la
navegabilidad a través de la estructura jerárquica una experiencia
agradable (siempre que a una actividad similar se le pueda aplicar
semejante calificativo). PyTables ofrece simplemente dos sencillos
métodos para ello.


¿Qué es HDF5?
-------------

Para aquellos que no conocen HDF5, se trata de una libreria de
propósito general a la vez un formato de fichero para guardar datos de
carácter científico que está hecha en el NCSA (EUA). HDF5 almacena dos
tipos de objectos principales: "datasets" y grupos. Un "dataset" es,
esencialmente, una matriz multimensional de datos, y un grupo es una
estructura para organizar los diferentes objectos en un fichero
HDF5. Usando estas dos estructuras básicas se puede crear y almacenar
casi cualquier tipo de estructura de datos científica, tales como
imágenes, vectores, matrices, así como retículas estructuradas y no
estructuradas. También se pueden combinar estos elementos en ficheros
HDF5 de acuerdo con las necesidades del caso.


Plataformas
-----------

Estoy desarrollando PyTables con Linux, pero es fácil compilarlo e
instalarlo para otras plataformas UNIX. En particular, este paquete ha
pasado todos los tests de funcionalidad en una plataforma UltraSparc
con Solaris 7 y 8. También compila y pasa los tests en una SGI
Origin2000 con processadores MIPS R12000 corriendo IRIX 6.5.

Respecto a Windows, se ha comprobado el correcto funcionamiento de
PyTables con Windows 2000 Profesional SP1 y Windows XP, aunque
también debiera funcionar con otros "sabores".


¿Un ejemplo?
------------

Para ejemplos online, echa un vistazo a 

http://pytables.sourceforge.net/tut/tutorial1-1.html

y 

http://pytables.sourceforge.net/tut/tutorial1-2.html


Sitio Web
---------

Visita el sitio web de PyTables para más detalles:

http://pytables.sourceforge.net/

Comparte tu experiencia
-----------------------

Hazme llegar cualquier problema, sugerencia, crítica o dolores
estomacales varios que puedas tener.

Un saludo,

-- Francesc Alted
falted@openlc.org

