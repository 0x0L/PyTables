====================================
 What's new in PyTables Std/Pro @VERSION@
====================================


:Author: Francesc Altet
:Contact: faltet@carabos.com
:Author: Ivan Vilata i Balaguer
:Contact: ivilata@carabos.com


This document details the modifications of PyTables Std/Pro @VERSION@ since
PyTables Standard version 1.x.  Its main purpose is help you ensure that your
programs will be runnable when you switch from PyTables Std 1.x to PyTables
Std/Pro @VERSION@.


API additions
=============

- Posar ací les coses relacionades amb els indexos

- The new ``Table.colpathnames`` is a sequence which contains the full
  pathnames of all bottom-level columns in a table.  This can be used to walk
  all ``Column`` objects in a table when used with ``Table.colinstances``.

- The new ``Table.colinstances`` dictionary maps column pathnames to their
  associated ``Column`` or ``Cols`` object for simple or nested columns,
  respectively.  This is similar to ``Table.cols._f_col()``, but faster.

- ``File.createEArray()`` received a new ``shape`` parameter.  This allows to
  not have to use the shape of the atom so as to set the shape of the
  underlying dataset (this change was needed for a future use of the atom
  shape as the dimensionality of the atom type).

- ``File.createCArray()`` has received a new ``chunksize`` parameter. This
  allows to not have to use the shape of the atom so as to set the chunksize
  of the underlying dataset (this change was needed for a future use of the
  atom shape as the dimensionality of the atom type).

- All the ``File.create*()`` factories for Leaf creation has received a new
  ``byteorder`` parameter that allows the user to specify the byteorder in
  which the data will be written to disk.


Backward-incompatible changes
=============================

- Now the ``Table.colnames`` attribute is just a list of the names of
  top-level columns in a table.  You can still get something similar to the
  old structure by using ``Table.description._v_nestedNames``.  See also the
  new ``Table.colpathnames`` attribute.

- The dictionaries File.objects, File.leaves and File.groups has been removed.
  If you need this functionality, please, use the File.getNode() and
  File.walkNodes() instead. (XXX documentar!!!)

- ``Table.removeIndex()`` is no longer available; to remove an index on a
  column, one must use the ``removeIndex()`` method of the associated
  ``Column`` instance.

- ``Column.dirty`` is no longer available.  If you want to check
  column index dirtiness, use ``Column.index.dirty``.

- ``complib`` and ``complevel`` parameters have been removed from
  ``File.createTable``, ``File.createEArray``, ``File.createCArray`` and
  ``File.createVLArray``. They were already deprecated in PyTables 1.x.

- Parameters ``shape`` and ``atom`` has been swapped in
  ``File.createCArray()``. This has been done to be consistent with Atom()
  definitions (i.e. type comes before and shape after).


Deprecated features
===================

- Node._v_rootgroup has been removed. Please use node._v_file.root instead.

- Node._f_isOpen() and Leaf.isOpen() methods has been removed. Use
  Node._v_isopen attribute instead (it is much faster).

- File.getAttrNode(), File.setAttrNode() and File.delAttrNode() have been
  removed. Please use File.getNodeAttr(), File.setNodeAttr() and
  File.delNodeAttr() instead.

- File.copyAttrs() has been removed. Use File.copyNodeAttrs() instead.

- table[colname] idiom has been removed. You can use table.cols._f_col(column)
  for doing the same.


API refinements
===============

- ????  (XXX - què posem ací, Ivan?)


Bug fixes (affecting API)
=========================

- None


----

  **Enjoy data!**

  -- The PyTables Team


.. Local Variables:
.. mode: text
.. coding: utf-8
.. fill-column: 78
.. End:
