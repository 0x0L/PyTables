README.txt
PyTables v0.2 (This is second alpha version)
http://pytables.sf.net/
November 11, 2002
--------------------------------------

################## Note ###############
#PyTables is still in alpha because I plan to add some new features
#(such as unlimited dimension arrays or general python attributes) and
#the API may still evolve a bit. Nevertheless, the present release has
#been thoroughly tested and may be used to do real work right
#now. However, don't complain if method names or file formats
#change (hopefully only slightly) in future releases.
#######################################

The goal of PyTables is to enable the end user to manipulate easily
scientific data tables and Numerical Python objects (new in 0.2!)  in
a hierarchical structure. The foundation of the underlying hierachical
data organization is the excellent HDF5 library
(http://hdf.ncsa.uiuc.edu/HDF5). Right now, PyTables provides limited
support of all the HDF5 functions, but I hope to add the more
interesting ones (for PyTables needs) in the near future.
Nonetheless, this package is not intended to serve as a complete
wrapper for the entire HDF5 API.

A table is defined as a collection of records whose values are stored
in fixed-length fields. All records have the same structure and all
values in each field have the same data type.  The terms
"fixed-length" and strict "data types" seems to be quite a strange
requirement for an interpreted language like Python, but they serve a
useful function if the goal is to save very large quantities of data
(such as is generated by many scientifc applications, for example) in
an efficient manner that reduces demand on CPU time and I/O.

In order to emulate records (C structs in HDF5) in Python, PyTables
implements a special metaclass that detects errors in field
assignments as well as range overflows. PyTables also provides a
powerful interface to process table data.

Quite a bit effort has been invested to make browsing the hierarchical
data structure a pleasant experience. PyTables implements just three
(orthogonal) easy-to-use methods for browsing. See the documentation
(located in the doc/ directory) for more details.

One of the principal objectives of PyTables is to be user-friendly.
To that end, the latest improvements introduced in Python 2.2 (such as
generators, slots and metaclasses in new-brand classes) have been used
and at times abused. Python 2.2 is also required in order to allow
PyTables make use of Pyrex, a convenient tool to access C libraries
from Python using Python syntax. For these reasons, you will need to
use Python 2.2 or higher to take advantage of PyTables.

I've tested this PyTables version with HDF5 1.4.4 and Numerical Python
22.0, but it should work well with all HDF5 1.4.x versions and a
relatively new version of Numeric (>= 20.x).

I'm using Linux as the main development platform, but PyTables should
be easy to compile/install on other UNIX machines. Nonetheless, caveat
emptor: more testing is needed to achieve complete portability, I'd
appreciate input on how it compiles and installs on other platforms.
In particular, I foresee problems on platforms that do not support the
"long long int" type (needed to create files with sizes larger than 2
GB).

Installation
------------

These instructions are for Unix/Linux systems. If you are using Windows
and you get the library to work, please let me know.

The Python Distutils are used to build and install PyTables, so it is
fairly simple to get things ready to go.

1. First, make sure that you have HDF5 1.4.x and Numerical Python
   installed (I'm using HDF5 1.4.4 and Numeric 22.0 currently). If
   don't, you can find them at http://hdf.ncsa.uiuc.edu/HDF5 and
   http://www.pfdubois.com/numpy. Compile/install them.

   setup.py will detect HDF5 libraries and include files under /usr
   or /usr/local; this will catch installations from RPMs, DEBs and
   most hand installations under Unix. If setup.py can't find your
   libhdf5 or if you have several versions installed and want to
   select one of them, then you can give it a hint either in the
   environment (using the HDF5_DIR environment variable) or on the
   command line by specifying the directory containing the include
   and lib directory.  For example:

            --hdf5=/stuff/hdf5-1.4.4

   If your HDF5 library was built as shared library, and if this
   shared library is not in the runtime load path, then you can
   specify the additional linker flags needed to find the shared
   library on the command line as well. For example:

           --lflags="-Xlinker -rpath -Xlinker /stuff/hdf5-1.4.4/lib"

   or perhaps just

           --lflags="-R /stuff/hdf5-1.4.4/lib"

   Check your compiler and linker documentation for correct syntax.

   It is also possible to link against different libraries
   with the --libs switch:

           --libs="-lhdf5-1.4.6"
           --libs="-lhdf5-1.4.6 -lnsl"

2. From the main PyTables distribution directory run this command,
   (plus any extra flags needed as discussed above):

        python setup.py build_ext --inplace

   Depending on the compiler flags used when compiling your Python
   executable, there may appear lots of warnings. Don't worry, almost all
   of them are caused by variables declared but never used. That's
   normal in the Pyrex extensions.

3. To run the test suite change into the test directory and run this
   command (in the shell "sh" and its variants):

        PYTHONPATH=..
	 export PYTHONPATH
        python test_all.py

   If you would like to see some verbose output from the tests simply
   add the flag "-v" and/or the word "verbose" to the command line.
   You can also run just the tests in a particular test module.  
   For example:

        python test_types.py -v

   If you run into problems because Python can't load hdf5 shared
   libraries, try to set the LD_LIBRARY_PATH environment variable to
   point to the directory where the libraries are.

4. To install the entire PyTables Python package, change back to the
   root distribution directory and run this command as the root user
   (remember to add any extra flags needed):

        python setup.py install

That's it!  Good luck, and let me know of any bugs, suggestions, gripes,
kudos, etc. you may have.

-- Francesc Alted
falted@openlc.org
