Announcing PyTables 0.8
-----------------------

PyTables is a hierarchical database package designed to efficently
manage very large amounts of data. PyTables is built on top of the
HDF5 library and the numarray package. It features an object-oriented
interface that, combined with natural naming and C-code generated from
Pyrex sources, makes it a fast, yet extremely easy to use tool for
interactively save and retrieve large amounts of data. Besides, it
provides flexible indexed access on disk to anywhere in the data you
want to go.
 
On this release you will find:
       - a memory leak was fixed
       - memory consumption is being addressed and lowered
       - much faster opening of files
       - Some important index patterns cases in reads has been optimized

More in detail:

What's new
-----------

        - The meaning of the stop parameter in read() methods has
          changed. Now a value of 'None' means the last row, and a
          value of 0 (zero) means the first row. This is more
          consistent with the range() function in python and the
          __getitem__() special method in numarray.

	- The Table.read() has added the "numarray" value to the
          flavor parameter for completeness.

	- The standard shuffle compression enabler filter present in
          HDF5 is supported.

	- The standard fletcher32 checksum filter present in HDF5 is
          supported.

	- As the supported number of filters is getting large (and
          that may be further increased in the future), a Filters()
          class has been added to deal more easily with the filter
          information. A consequence of that is a slightly backward
          incompatible change in the createTable() function, in the
          sense that "compress" and "complib" are deprecated now and
          you should use the "filters" parameter. However, you will be
          able to continue using the old parameters (only a
          Deprecation warning will be issued) for a couple of
          versions, but you should migrate to the new version as soon
          as possible. In general, you can easily migrate old code
          by substituting code like:

                table = fileh.createTable(group, 'table', Test, '',
                                          complevel, complib, nrows)
	  by

                table = fileh.createTable(group, 'table', Test, '',
                                          Filters(complevel, complib), nrows)


	- HDF5 H5T_VLEN native datatypes are supported now when
          accessing native HDF5 files.  However, H5T_ARRAY datatypes
          has been deprecated as atomic types in (E)Array objects for
          now. The reason is that H5T_ARRAY datatypes cannot be
          subdivided for doing I/O (and, in particular, when doing
          selections). If anyone is interested, H5T_ARRAY type migth
          be implemented in Arrays in the future.

	- New UnImplemented class. If a dataset contains unsupported
          datatypes, it will be associated with an UnImplemented
          instance and added to the object tree in the normal way. In
          that way, you can continue to work with other possible
          supported objects, while retaining access to attributes of
          unsupported datatypes. This behaviour has changed from
          previous versions, where a RuntimeError was issued in case
          of an unsupported object.

	  The new UnImplemented class together with the support for
          new datatypes will enable PyTables to greatly enlarge the
          range of native HDF5 that can be read/modified.


What is a table?
----------------

A table is defined as a collection of records whose values are stored
in fixed-length fields. All records have the same structure and all
values in each field have the same data type.  The terms
"fixed-length" and "strict data types" seems to be quite a strange
requirement for an language like Python, that supports dynamic data
types, but they serve a useful function if the goal is to save very
large quantities of data (such as is generated by many scientific
applications, for example) in an efficient manner that reduces demand
on CPU time and I/O resources.

What is HDF5?
-------------

For those people who know nothing about HDF5, it is is a general
purpose library and file format for storing scientific data made at
NCSA. HDF5 can store two primary objects: datasets and groups. A
dataset is essentially a multidimensional array of data elements, and
a group is a structure for organizing objects in an HDF5 file. Using
these two basic constructs, one can create and store almost any kind of
scientific data structure, such as images, arrays of vectors, and
structured and unstructured grids. You can also mix and match them in
HDF5 files according to your needs.

Platforms
---------

I'm using Linux as the main development platform, but PyTables should
be easy to compile/install on other UNIX machines. This package has
also passed all the tests on a UltraSparc platform with Solaris 7 and
Solaris 8. It also compiles and passes all the tests on a SGI
Origin2000 with MIPS R12000 processors and running IRIX 6.5.

Regarding Windows platforms, PyTables has been tested with Windows
2000 and Windows XP, but it should also work with other flavors.

An example?
-----------

For online code examples, have a look at

http://pytables.sourceforge.net/tut/tutorial1-1.html

and 

http://pytables.sourceforge.net/tut/tutorial1-2.html

Web site
--------

Go to the PyTables web site for more details:

http://pytables.sourceforge.net/

Share your experience
---------------------

Let me know of any bugs, suggestions, gripes, kudos, etc. you may
have.

Have fun!

-- Francesc Alted
falted@openlc.org

