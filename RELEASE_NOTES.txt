=======================================
 Release notes for PyTables 2.1 series
=======================================

:Author: Francesc Alted i Abad
:Contact: faltet@pytables.com
:Author: Ivan Vilata i Balaguer
:Contact: ivan@selidor.net


Changes from 2.0.x to 2.1b2
===========================

- When opening a node, that will be done directly, without populating first
  all the parent directories.  So, for opening pre-known group and leaf
  locations, the new code is substantially faster (in fact, the cost is O(1)).

- New File.fileno() added.  This returns the underlying OS file descriptor for
  the file.

- [Pro] A new Table.itersorted() iterator allows to iterate through a table
  following the order of a certain index.  It supports iteration on
  ranges, including negative steps (i.e. reverse sorted order).

- [Pro] New Table.readSorted() method that can read a table following the
  order of a certain index.  It supports the reads on ranges, including
  negative steps (i.e. reverse sorted order).

- [Pro] Now, the copy of the AUTO_INDEX is done only if the `copyuserattrs` in
  Table.copy() is true (the default).

- [Pro] A new `sortkey` argument has been added to Table.copy() allowing to a
  Table to be sorted during the copy operation.

- [Pro] New `copyindexes` argument in Table.copy().  If true, the indexes in
  the source table are copied. If false (the default), the indexes are not
  copied.

- Added new '--sortkey' (sort a table by a column key) and '--copyindexes'
  (recreate the indexes in original tables) flags to the 'ptrepack' utility.

- When in ptrepack a range is not specified, all the elements of leaves are
  copied now.  Before, only the first row was copied, and that was clearly
  wrong.

- New Table.colindexes property that returns a dictionary with the indexes of
  the indexed columns in table.


API changes from 2.0.x to 2.1b2
===============================

- The Table.indexFilters property has been removed (after a period of
  ``DeprecationWarnings``).  If you want to change filters in indexes, please
  use the `filters` parameter of the Column.createIndex() method (and the
  like).

- Table.willQueryUseIndexing() has changed its return value by a frozen set of
  usable indexed columns for its `condition` parameter.

- The `sort` parameter of Table.itersequence() has been removed as it will not
  allow to sort sequences larger than memory.  In addition, it is not clear
  that sorting would be a clear advantage in all situations.


----

  **Enjoy data!**

  -- The PyTables Team


.. Local Variables:
.. mode: rst
.. coding: utf-8
.. fill-column: 78
.. End:
